package jp.co.nttdocomo.ebook.server;

import android.app.Activity;
import android.app.NotificationManager;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.os.Vibrator;
import android.support.v4.content.LocalBroadcastManager;
import android.webkit.CookieManager;

import jp.co.nttdocomo.ebook.Constants;
import jp.co.nttdocomo.ebook.ContentInfo;
import jp.co.nttdocomo.ebook.ContentInfo.DownloadTaskInfo;
import jp.co.nttdocomo.ebook.Debug;
import jp.co.nttdocomo.ebook.EbookApplication;
import jp.co.nttdocomo.ebook.EbookModel;
import jp.co.nttdocomo.ebook.EbookPreferences;
import jp.co.nttdocomo.ebook.EbookSettings.Contents;
import jp.co.nttdocomo.ebook.ExtraKeys;
import jp.co.nttdocomo.ebook.SampleInfo;
import jp.co.nttdocomo.ebook.TitleInfo;
import jp.co.nttdocomo.ebook.Util;
import jp.co.nttdocomo.ebook.fragments.SettingStorage;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.BindException;
import java.net.HttpRetryException;
import java.net.MalformedURLException;
import java.net.NoRouteToHostException;
import java.net.ProtocolException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.net.UnknownServiceException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.net.ssl.SSLException;

public class DownloadTask extends ServerTask<Map<String, String>> {
	@SuppressWarnings("unused")
	private static final String TAG = "DownloadTask";
	
	private static final int MAX_RETRY_COUNT = 10;
	private static final String VALUE_IS_SAMPLE = "1";
	private static final int RESULT_START_BG_DOWNLOAD = -100;

//	private ContentInfo mContentInfo;
	private long mTitleId;
	private String mContentId;
	private boolean mIsSample;
	
	private EbookModel mModel;
	private int mStorePosition;
	
	private HttpPost objPost = null;
	private long mContentLength = 0;

	public static final float K_BYTE = 1024f;
	private static final int TIME_OUT = 30000;

	private BackgroundDownloadCallback mBackgroundCallback;
	private boolean mNeedNotification = false;
	
	private boolean mIsRangeDownloaded = false;
	private boolean mKeepResourcesForBacgkroundDownload = false;
	
	private LocalBroadcastManager mBroadcastManager;

	public enum DownloadingState { CLEAR, WAIT, DOWNLOADING, DONE, FAILED };
	
	public interface OnContentInfoUpdatedCallback {
		public void onContentInfoUpdated();
	}
	
	public interface BackgroundDownloadCallback {
		public void onStartBackgroundDownload(ContentInfo contentInfo);
	    public void onProgressBackgroundDownload(ContentInfo contentInfo);
	    public void onFinishBackgroundDownload(ContentInfo contentInfo, ServerTask<?> serverTask, ServerResult<?> result);
	}
	
	public DownloadTask(Context context) {
		super(context);
		mModel = (EbookModel) ((EbookApplication)getContext().getApplicationContext()).getModel();
		mBroadcastManager = LocalBroadcastManager.getInstance(context);
	}
	
	public ContentInfo getContentInfo() {
		if(mModel == null)
			return null;
		
		if(mIsSample)
			return mModel.getTemporarySamplInfoForDownloads();
		
		return mModel.findContentInfoById(mTitleId, mContentId);
	}

	@Override
	public void setRequest(Map<String, String> request) {
		super.setRequest(request);
		
		mTitleId = Long.valueOf(request.get(TitleInfo.TITLE_ID));
		mContentId = request.get(ContentInfo.CONTENTS_ID);
		mIsSample = VALUE_IS_SAMPLE.equals(request.get(ExtraKeys.SAMPLE_FLG))?true:false;
		
		String contentsCurrentLength = request.get(ExtraKeys.CONTENTS_CURRENT_LENGTH);
		if(contentsCurrentLength != null)
			mContentLength = Long.valueOf(contentsCurrentLength);
		else
			mContentLength = 0L;
		
		// Retrieve contentInfo
		if(mIsSample) {
			mIsSample = true;
		} else if(mContentId != null && mContentId.length() != 0) {
			mIsSample = false;
		}
	}

	/**
	 * Set store position/method
	 * 
	 * @param storePosition Values {@link SettingStorage.STORAGE_EXTERNAL}, 
	 * {@link SettingStorage.STORAGE_INTERNAL}, {@link SettingStorage.STORAGE_NOT_SAVE}
	 */
	public void setStorePosition(int storePosition) {
		mStorePosition = storePosition;
	}

	@Override
	public int getApiId() {
		if(Debug.USE_SHA_256_DOWNLOAD) {
			if(mIsRangeDownloaded)
				return ServerInterface.API_CONTENTS_DOWNLOAD_RESUME2;
			else
				return ServerInterface.API_CONTENTS_DOWNLOAD2;
		} else {
			if(mIsRangeDownloaded)
				return ServerInterface.API_CONTENTS_DOWNLOAD_RESUME;
			else 
				return ServerInterface.API_CONTENTS_DOWNLOAD;
		}
	}
	
	public void setBackgroundDownloadProgressCallBack(BackgroundDownloadCallback callback) {
		mBackgroundCallback = callback;
		if(callback != null)
			mNeedNotification = true;
		else
			mNeedNotification = false;
	}
	
	public void setKeepResoucesForBackgroundDownload(boolean keepResource) {
		mKeepResourcesForBacgkroundDownload = keepResource;
	}
	
	public void clearBackgroundDownloads() {
		final ContentInfo contentInfo = mModel.findContentInfoById(mTitleId, mContentId);
		if(contentInfo != null) {
			if(mResult instanceof Map) {
				@SuppressWarnings("unchecked")
				Map<String, String> result = (Map<String, String>)mResult;
				final String filePath = result.get(RESULT_FILE_PATH);
				if(filePath != null) {
					Util.removeContents(getContext(), contentInfo, filePath);
				}
			}
			
			updateDownloadStatesUI(contentInfo, DownloadingState.CLEAR, null);
			contentInfo.clearDownloadTaskInfo();
			sendDownloadTaskIntent(contentInfo, Constants.ACTION_UPDATE_DOWNLOAD_CANCELED);
			sendCompleteRequest(contentInfo); 
		}
	}
	
	@Override
	public void finish() {
		super.finish();
		
		if(mBackgroundCallback != null) {
			final ContentInfo contentInfo = mModel.findContentInfoById(mTitleId, mContentId);
			mBackgroundCallback.onFinishBackgroundDownload(contentInfo, this, mResult);
		}
	}

	@Override
	public ServerResult<Map<String, String>> parseResponse(
			IServerResponseCallback callback, Map<String, String> request) {
		Map<String, String> result = new HashMap<String, String>();
		
		if (isCancelled()) {
			return ServerResult.createNormalResult();
		}
		
		ContentInfo contentInfo = null;
		if(!mIsSample) {
			android.util.Log.d("hsw_dbg", " t = " + mTitleId + " c = " + mContentId);
			contentInfo = mModel.findContentInfoById(mTitleId, mContentId);
		} else {
			contentInfo = mModel.getTemporarySamplInfoForDownloads();
		}
		
		if(contentInfo == null) {
			android.util.Log.d("hsw_dbg", " +_+_+_+_+_++_+_+_+_+_+_");
			return null; //TODO not usual case
		}

		mStorePosition = contentInfo.downloadedPosition;
		
		if(contentInfo.getDownloadTaskInfo() == null)
			contentInfo.createDownloadTaskInfo();
		
		updateDownloadStatesUI(contentInfo, DownloadingState.WAIT, null);

		try {
			result = fileDownload(contentInfo);
		} catch (ResponseErrorException e) {
			
			result.put(ExtraKeys.SAMPLE_FLG, Boolean.toString(mIsSample));
			result.put(RESULT_KEY_ERROR, e.getMessage());
		} catch (IOException e) {
			result = new HashMap<String, String>();
			if (Util.isAirPlaneMode(getContext())) {
				result.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_AIRPLAIN_MODE));
			} else {
				result.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_FAILED));
			}
		} finally {
			String errorIdInString = (result != null) ? result.get(RESULT_KEY_ERROR) : null;
			if(errorIdInString != null) {
				final boolean userCancel = errorIdInString.equals(String.valueOf(HttpCommunicationService.USER_CANCEL));
				int errorId;
				try {
					errorId = Integer.valueOf(errorIdInString);
				} catch (NumberFormatException e) {
					errorId = 0;
				}
				
				contentInfo.downloadedPosition = mStorePosition;
				
				if(errorId == RESULT_START_BG_DOWNLOAD) {
					// Background download
					mNeedNotification = true;
					updateDownloadStatesUI(contentInfo, DownloadingState.WAIT, null);
					
					return ServerResult.createErrorResult(errorId);
				} else {
					// User cancelled or Error occurred
					// Delete file & No update
					final String filePath = result.get(RESULT_FILE_PATH);
					if(filePath != null) {
						Util.removeContents(getContext(), contentInfo, filePath);
					}

					if(userCancel) {
						updateDownloadStatesUI(contentInfo, DownloadingState.CLEAR, null);
					} else {
						updateDownloadStatesUI(contentInfo, DownloadingState.FAILED, ServerResult.createErrorResult(errorId));
					}

					contentInfo.clearDownloadTaskInfo();

					sendDownloadTaskIntent(contentInfo, Constants.ACTION_UPDATE_DOWNLOAD_CANCELED);
					sendCompleteRequest(contentInfo); 

					if(userCancel)
						return ServerResult.createNormalResult();

					if(errorId == HttpCommunicationService.RESPONSE_NOT_SPACE) {
						android.util.Log.d("hsw_dbg", " -.-;;;");
						result.put(TitleInfo.TITLE_ID, Long.toString(contentInfo.titleId));
						result.put(ContentInfo.CONTENTS_ID, contentInfo.contentId);
						return ServerResult.createErrorResult(result, errorId);
					} else {
						return ServerResult.createErrorResult(HttpCommunicationService.RESPONSE_FAILED);
					}
				}
			}
		}

		sendDownloadTaskIntent(contentInfo, Constants.ACTION_UPDATE_DOWNLOAD_FINISHED);
		return ServerResult.createNormalResult();
	}
	
	private void updateDownloadStatesUI(ContentInfo contentInfo, DownloadingState state, ServerResult<?> result) {
		if(contentInfo == null)
			return;
		
        DownloadTaskInfo taskInfo = contentInfo.getDownloadTaskInfo();
        if(taskInfo == null) {
        	NotificationManager manager = (NotificationManager) getContext().getSystemService(Context.NOTIFICATION_SERVICE);
        	manager.cancel((int)contentInfo.id);
        	return;
        }
        
		if(mNeedNotification) {
 			if(taskInfo.notificationBuilder == null)
				taskInfo.notificationBuilder = Util.createNotificationBuilder(getContext(), contentInfo);
		}
		
		String action = null;
		switch (state) {
		case WAIT:
			action = Constants.ACTION_UPDATE_DOWNLOAD_START;
			if(mBackgroundCallback != null)
				mBackgroundCallback.onStartBackgroundDownload(contentInfo);
			break;
		case DOWNLOADING:
		    taskInfo.isWaiting = false;
			action = Constants.ACTION_UPDATE_DOWNLOAD_PROGRESS;
			if(mBackgroundCallback != null) 
				mBackgroundCallback.onProgressBackgroundDownload(contentInfo);
			break;
		case DONE:
			action = Constants.ACTION_UPDATE_DOWNLOAD_FINISHED;
			if(mBackgroundCallback != null) 
				mBackgroundCallback.onFinishBackgroundDownload(contentInfo, this, result);
			break;
		case CLEAR:
            taskInfo.isWaiting = false;
			action = Constants.ACTION_UPDATE_DOWNLOAD_CANCELED;
			if(mBackgroundCallback != null) 
				mBackgroundCallback.onFinishBackgroundDownload(contentInfo, this, result);
			break;
		case FAILED:
		default:
            taskInfo.isWaiting = false;
			break;
		}
		
		if(action != null)
			sendDownloadTaskIntent(contentInfo, action);
		
		if(needNotifyDownload() && contentInfo != null)
			Util.notifyDownloadProgress(getContext(), contentInfo, state);
	}

	private Map<String, String> fileDownload(final ContentInfo contentInfo) throws ResponseErrorException, IOException {
		final DownloadTaskInfo taskInfo = contentInfo.getDownloadTaskInfo();

		mStorePosition = EbookPreferences.getInt(EbookPreferences.SETTING_DOWNLOAD_STORAGE, SettingStorage.STORAGE_INTERNAL);

		String storeFolderPath = Util.getDownloadedFolder(getContext(), mStorePosition);
		if(storeFolderPath == null || "".equals(storeFolderPath)) {
			//Use internal instead
			storeFolderPath = Util.getInSideUserSavePath(getContext());
			mStorePosition = SettingStorage.STORAGE_INTERNAL;
		}

		String filePath = storeFolderPath + File.separator + contentInfo.contentId;
		Map<String, String> requestParam = new HashMap<String, String>();

		requestParam.put(TitleInfo.TITLE_ID, Util.getTitleId(contentInfo.titleId));
		requestParam.put(ContentInfo.CONTENTS_ID, contentInfo.contentId);
		requestParam.put(ImeiVerify.REQ_PARAM_IMEI, Util.getImei(getContext())); //TODO
		if (contentInfo.isSample) {
			requestParam.put(HttpCommunicationService.SAMPLE_FLG, "1");
		} else {
			requestParam.put(HttpCommunicationService.SAMPLE_FLG, "0");
			requestParam.put("contents_format", String.valueOf(contentInfo.contentFormat));
		}
		
		int responseCode = 0;
		int BUFFER_SIZE = 10240;

		String contentsFormat = null;

		Map<String, String> resultMap = new HashMap<String, String>();
		String uri;
		int resumeSize = 0;
		File tmpFile = new File(filePath.concat(Constants.FILE_TMP_EXT));
		
		if (tmpFile.exists() && tmpFile.length() > 0 && mContentLength == 0) {
			Util.removeContents(getContext(), contentInfo, tmpFile.getAbsolutePath());
		}

		if (tmpFile.exists() && tmpFile.length() > 96) {
			mIsRangeDownloaded = true;
			resumeSize = (int) tmpFile.length();
			uri = ServerInterface.getApiUrl(getContext(), getApiId());
			
			objPost = new HttpPost(uri);
			objPost.setHeader("Range", String.format("bytes=%d-%d", resumeSize, mContentLength));
			taskInfo.downloadedSize = resumeSize;
		} else {
			mIsRangeDownloaded = false;
			tmpFile.delete();
			tmpFile.createNewFile();
			uri = ServerInterface.getApiUrl(getContext(), getApiId());
			objPost = new HttpPost(uri);
		}
		
		DefaultHttpClient hClient = new DefaultHttpClient();
		List<NameValuePair> objValuePairs = new ArrayList<NameValuePair>(2);
		
		objPost.setEntity(new UrlEncodedFormEntity(objValuePairs, "UTF-8"));

		HttpParams params = hClient.getParams();
		HttpConnectionParams.setConnectionTimeout(params, TIME_OUT);
		HttpConnectionParams.setSoTimeout(params, TIME_OUT * 10);
		params.setParameter("http.useragent",
				HttpCommunicationService.getUserAgent(getContext()));

		if (requestParam.containsKey("contents_format")) {
			contentsFormat = requestParam.get("contents_format");
			requestParam.remove("contents_format");
		}
		for(String key : requestParam.keySet()) {
			android.util.Log.d("hsw_dbg", " req param key = " + key + " val = " + requestParam.get(key));	
		}
		

		if (requestParam.size() > 0) {
			List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
			Iterator<Entry<String, String>> ite = requestParam.entrySet().iterator();
			while (ite.hasNext()) {
				Entry<String, String> entry = ite.next();
				nameValuePair.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
			}
			objPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
		}

		CookieManager cookieManager = CookieManager.getInstance();
		if (cookieManager.hasCookies() || cookieManager.getCookie(uri) != null) {
			objPost.setHeader("Cookie", cookieManager.getCookie(uri));
		}

		UsernamePasswordCredentials user = new UsernamePasswordCredentials("sol", "sol01");
		AuthScope scope = new AuthScope(null, -1);
		hClient.getCredentialsProvider().setCredentials(scope, user);
		
//		DefaultHttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler() {
//			
//			@Override
//			public boolean isRequestSentRetryEnabled() {
//				return true;
//			}
//
//			@Override
//			public int getRetryCount() {
//				return MAX_RETRY_COUNT;
//			}
//
//			@Override
//			public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
//				android.util.Log.d("hsw_dbg", " retryRequest = " + exception + " executionCount = " + executionCount );
//				if(executionCount >= getRetryCount()) // Retry 10 times
//					return false;
//
//				if(exception instanceof SocketTimeoutException) {
//					return true;
//				} else if (exception instanceof ClientProtocolException) {
//					return true;
//				} else if (exception == null) {
//		            throw new IllegalArgumentException("Exception parameter may not be null");
//		        }
//		        if (context == null) {
//		            throw new IllegalArgumentException("HTTP context may not be null");
//		        }
//		        if (exception instanceof NoHttpResponseException) {
//		            // Retry if the server dropped connection on us
//		            return true;
//		        }
//		        if (exception instanceof InterruptedIOException) {
//		            // Timeout
//		            return false;
//		        }
//		        if (exception instanceof UnknownHostException) {
//		            // Unknown host
//		            return false;
//		        }
//		        if (exception instanceof ConnectException) {
//		            // Connection refused 
//		            return false;
//		        }
//		        if (exception instanceof SSLHandshakeException) {
//		            // SSL handshake exception
//		            return false;
//		        }
//				
//				return false;             
//			}  
//		};
//		hClient.setHttpRequestRetryHandler(retryHandler);
//		HttpProtocolParams.setUseExpectContinue(hClient.getParams(), false);

		HttpResponse hResp = hClient.execute(objPost);

		if (isCancelled()) {
			objPost.abort();
			resultMap.put("file_name", tmpFile.getAbsolutePath());
			if(mKeepResourcesForBacgkroundDownload)
				throw new ResponseErrorException(String.valueOf(RESULT_START_BG_DOWNLOAD));
			else {
				resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.USER_CANCEL));
				return resultMap;
			}
		}

		long freeSpace = Util.getAvailableSpaceOfDownloadFolder(getContext(), mStorePosition);
		responseCode = hResp.getStatusLine().getStatusCode();
		if (freeSpace < hResp.getEntity().getContentLength()) {
			Util.removeContents(getContext(), contentInfo, tmpFile.getAbsolutePath());
			throw new ResponseErrorException(String.valueOf(HttpCommunicationService.RESPONSE_NOT_SPACE));
		}

		if (responseCode == HttpStatus.SC_OK || responseCode == HttpStatus.SC_PARTIAL_CONTENT) {
			int fileSize = (int) (hResp.getEntity().getContentLength() / K_BYTE);
			contentInfo.fileSize = fileSize / K_BYTE; // Convert to MB
			
			HashMap<String, String> headerMap = new HashMap<String, String>();
			for(Header header : hResp.getAllHeaders()) {
				headerMap.put(header.getName(), header.getValue());
			}

			Header[] contentLengths = hResp.getHeaders("Content-Length");
			int contentLength = 0;
			if(contentLengths != null && contentLengths.length > 0) {
				contentLength = Integer.valueOf(contentLengths[0].getValue()) - 1;
				taskInfo.contentLength = contentLength;
			}

			Header[] disposition = hResp.getHeaders("Content-Disposition");
			if(disposition != null && disposition.length > 0) {
				String attachment = disposition[0].getValue();
				String fileName = attachment.substring(attachment.lastIndexOf("filename=") + 10, attachment.length() - 1);
				resultMap.put(ExtraKeys.BOOK_FILE_NAME, fileName);
				
				if(contentInfo.isSample)
					contentInfo.fileName = fileName;
			}
			Header[] bookType = hResp.getHeaders("BookType");
			if(bookType != null && bookType.length > 0) {
				resultMap.put(ExtraKeys.BOOK_TYPE, bookType[0].getValue());
				if(contentInfo.isSample)
					contentInfo.contentsType = Integer.valueOf(bookType[0].getValue());
			}

			Header[] bookFormat = hResp.getHeaders("BookFormat");
			if(bookFormat != null && bookFormat.length > 0) {
				if(contentInfo.isSample) {
					try {
						contentInfo.contentFormat = Long.valueOf(bookFormat[0].getValue());
					} catch (NumberFormatException e) {
						
					}
				}
				if (contentsFormat != null) {
					if (!bookFormat[0].getValue().equals(contentsFormat)) {
						throw new ResponseErrorException("3978");
					}
				}
				resultMap.put(ExtraKeys.BOOK_FORMAT, bookFormat[0].getValue());
			}
			
			// If BSKoma sample, stop download
			if(contentInfo.isSample && contentInfo.contentFormat == Constants.CONTENTS_BOOK_FORMAT_BS) {
				return resultMap;
			}
			
			Header[] errorCode = hResp.getHeaders("Error-Code");
			if(errorCode != null && errorCode.length > 0) {
				String errorString = errorCode[0].getValue();
				if (!RESPONSE_CODE_OK.equals(errorString)) {
					if(RESPONSE_CODE_FILE_NOT_FOUND.equals(errorString)
							&& contentInfo.contentFormat == Constants.CONTENTS_BOOK_FORMAT_BS
							&& contentInfo.isSample) {

						if(mStorePosition != SettingStorage.STORAGE_NOT_SAVE)
							contentInfo.isDownloaded = true;

						contentInfo.clearDownloadTaskInfo();
						sendDownloadTaskIntent(contentInfo, Constants.ACTION_UPDATE_DOWNLOAD_FINISHED);

						final boolean vibrate = EbookPreferences.getBoolean(EbookPreferences.SETTING_COMPLETE_VIBRATION, true);
						if(vibrate) {
							final Vibrator vibrator = (Vibrator) getContext().getSystemService(Context.VIBRATOR_SERVICE);
							vibrator.vibrate(Constants.VIBRATE_TIME);
						}

						final EbookApplication app = (EbookApplication)getContext().getApplicationContext();
						app.getModel().initSubTitlesList();

						return resultMap;
					} else {
						Util.removeContents(getContext(), contentInfo, tmpFile.getAbsolutePath());

						final String code = errorCode[0].getValue();
						if(RESPONSE_CODE_FILE_NOT_FOUND.equals(code)) {
							resultMap.put(RESULT_KEY_ERROR, RESPONSE_CODE_FILE_NOT_FOUND);
							return resultMap;
						} else if(RESPONSE_CODE_SERVER_MAINTENANCE.equals(code)) {
							resultMap.put(RESULT_KEY_ERROR, RESPONSE_CODE_SERVER_MAINTENANCE);
							return resultMap;
						} else if(HttpCommunicationService.ERROR_CODE_AUTH_ERROR.equals(code)) {
							resultMap.put(RESULT_KEY_ERROR, HttpCommunicationService.ERROR_CODE_AUTH_ERROR);
							return resultMap;
						}
						throw new ResponseErrorException(errorCode[0].getValue());
					}
				}
			} else {
				if (resumeSize == 0) {
					Util.removeContents(getContext(), contentInfo, tmpFile.getAbsolutePath());
					throw new ResponseErrorException(String.valueOf(HttpCommunicationService.RESPONSE_FAILED));
				}
			}
			
			if (resumeSize != 0) {
				if (resumeSize == mContentLength) {
					return resultMap;
				}
				if(taskInfo != null) {
					taskInfo.contentLength = taskInfo.contentLength + resumeSize;
					if (taskInfo.contentLength != mContentLength) {
						throw new ResponseErrorException(String.valueOf(3978));
					}
				}
			}

			InputStream is = hResp.getEntity().getContent();
			BufferedInputStream in = new BufferedInputStream(is, BUFFER_SIZE);
			BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(tmpFile, true), BUFFER_SIZE);
			try {
				taskInfo.downloadedSize = resumeSize;
				byte buf[] = new byte[BUFFER_SIZE];
				int size = -1;
				while ((size = in.read(buf)) != -1) {
					if (isCancelled()) {
						objPost.abort();
						throw new InterruptedException();
					}
					out.write(buf, 0, size);
					out.flush();
					if(taskInfo != null) {
						taskInfo.downloadedSize += size;
					}
					
					final int minNotifyAmount = taskInfo.contentLength / 100;
					if((taskInfo.downloadedSize - taskInfo.prevDownloadedSize) > minNotifyAmount) {
						updateDownloadStatesUI(contentInfo, DownloadingState.DOWNLOADING, null);
						taskInfo.prevDownloadedSize = taskInfo.downloadedSize;
					}
				}
				if (in != null) {
					in.close();
					in = null;
				}
				if (out != null) {
					out.close();
					out = null;
				}

				if(!isCancelled() && resultMap.get(RESULT_KEY_ERROR) == null) {
					updateDownloadStatesUI(contentInfo, DownloadingState.DONE, null);

					final String completedRes = sendCompleteRequest(contentInfo);
					if(!String.valueOf(HttpCommunicationService.RESPONSE_OK).equals(completedRes)) {
						Util.removeContents(getContext(), contentInfo, filePath);
						throw new ResponseErrorException(completedRes);
					}
					
					if(mStorePosition != SettingStorage.STORAGE_NOT_SAVE)
						contentInfo.isDownloaded = true;

					contentInfo.downloadedPosition = mStorePosition;
					
					ContentValues isUpdatedValues = new ContentValues();
					isUpdatedValues.put(Contents.IS_DOWNLOADED, contentInfo.isDownloaded);
					isUpdatedValues.put(Contents.DL_POSITION, contentInfo.downloadedPosition);
					EbookModel.updateToDatabase(getContext(), Contents.CONTENT_URI, contentInfo.id, isUpdatedValues);

					Context context = getContext();
					if(context instanceof Activity) {
						((Activity)context).runOnUiThread(new Runnable() {
							@Override
							public void run() {
								contentInfo.clearDownloadTaskInfo();
							}
						});
					} else {
						contentInfo.clearDownloadTaskInfo();
					}

					//Rename to same partition
					tmpFile.renameTo(new File(storeFolderPath + File.separator + contentInfo.fileName));

					final boolean vibrate = EbookPreferences.getBoolean(EbookPreferences.SETTING_COMPLETE_VIBRATION, true);
					if(vibrate) {
						final Vibrator vibrator = (Vibrator) getContext().getSystemService(Context.VIBRATOR_SERVICE);
						vibrator.vibrate(Constants.VIBRATE_TIME);
					}

					final EbookApplication app = (EbookApplication)getContext().getApplicationContext();
					app.getModel().initSubTitlesList();
				}
			} catch (BindException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (HttpRetryException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (MalformedURLException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (NoRouteToHostException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (ProtocolException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (UnknownHostException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (UnknownServiceException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (SocketTimeoutException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (InterruptedException e) {
				resultMap.put("file_name", tmpFile.getAbsolutePath());
				if(mKeepResourcesForBacgkroundDownload)
					resultMap.put(RESULT_KEY_ERROR, String.valueOf(RESULT_START_BG_DOWNLOAD));
				else
					resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.USER_CANCEL));
				return resultMap;
			} catch (SocketException e) {
				e.printStackTrace();
				return getExceptionMap(contentInfo);
			} catch (IOException e) {
				e.printStackTrace();
				Util.removeContents(getContext(), contentInfo, filePath);
				if(e instanceof ConnectTimeoutException)
					resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_TIMEOUT));
				else if(e instanceof SocketException || e instanceof SSLException)
					resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_CONNECTION));
				else {
					android.util.Log.d("hsw_dbg", " -.-;;;2");
					resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_NOT_SPACE));
				}
				return resultMap;
			} catch (NullPointerException e) {
				e.printStackTrace();
				Util.removeContents(getContext(), contentInfo, filePath);
				return resultMap;
			} catch (ResponseErrorException e) {
				e.printStackTrace();
				resultMap.put(RESULT_KEY_ERROR, e.getMessage());
				return resultMap;
			} finally {
				if (in != null) {
					try {
						in.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (out != null) {
					try {
						out.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (hResp != null && hResp.getEntity() != null) {
					try {
						hResp.getEntity().consumeContent();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (hClient != null) {
					hClient.getConnectionManager().shutdown();
				}
				if(tmpFile != null) {
					resultMap.put(RESULT_FILE_PATH, tmpFile.getAbsolutePath());
				}
			}
		} else {
			throw new ResponseErrorException(String.valueOf(RESPONSE_HTTP_ERROR));
		}
		return resultMap;
	}
	
	private String sendCompleteRequest(ContentInfo contentInfo) {
		final String completeUri = ServerInterface.getApiUrl(getContext(), ServerInterface.API_CONTENTS_DOWNLOAD_COMPLETE);
		Map<String, String> completeRequest = new HashMap<String, String>();
		completeRequest.put(HttpCommunicationService.URI, completeUri);
		completeRequest.put(TitleInfo.TITLE_ID, Util.getTitleId(contentInfo.titleId));
		completeRequest.put(ContentInfo.CONTENTS_ID, contentInfo.contentId);
		completeRequest.put(ExtraKeys.BOOK_FORMAT_ID, String.valueOf(contentInfo.contentFormat));
		completeRequest.put(ExtraKeys.SAMPLE_FLG, (contentInfo.isSample)?"1":"0");
		try {
			HttpCommunicationService.postRequest(completeRequest, false, getContext());
		} catch (ParseException e) {
			e.printStackTrace();
			return String.valueOf(HttpCommunicationService.RESPONSE_FAILED);
		} catch (Exception e) {
			e.printStackTrace();
			return String.valueOf(HttpCommunicationService.RESPONSE_FAILED);
		}
		
		return String.valueOf(HttpCommunicationService.RESPONSE_OK);
	}
	
	private void sendDownloadTaskIntent(ContentInfo contentInfo, String action) {
		if(contentInfo == null)
			return;
		
		Intent downloadIntent = new Intent(action); 
		downloadIntent.putExtra(TitleInfo.TITLE_ID, contentInfo.titleId);
		downloadIntent.putExtra(ExtraKeys.CONTENTS_ID, contentInfo.contentId);
		mBroadcastManager.sendBroadcast(downloadIntent);
	}

	private Map<String, String> getExceptionMap(ContentInfo contentInfo) {
		Map<String, String> resultMap = new HashMap<String, String>();
		if(Util.isNetworkAvailable(getContext())) {
			resultMap.put(TitleInfo.TITLE_ID, String.valueOf(contentInfo.titleId));
			resultMap.put(ContentInfo.CONTENTS_ID, contentInfo.contentId);
			resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_ERROR_RETRY));
		}
		if (Util.isAirPlaneMode(getContext())) {
			resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_AIRPLAIN_MODE));
		} else {
			resultMap.put(RESULT_KEY_ERROR, String.valueOf(HttpCommunicationService.RESPONSE_FAILED));
		}
		return resultMap;
	}
	
	public void cancelDownloadNotification() {
		final ContentInfo contentInfo = mModel.findContentInfoById(mTitleId, mContentId);
		if(contentInfo == null)
			return;
		
		NotificationManager manager = (NotificationManager) getContext().getSystemService(Context.NOTIFICATION_SERVICE);
		manager.cancel((int)contentInfo.id);
	}
	
	private boolean needNotifyDownload() {
		return mNeedNotification;
	}
}
