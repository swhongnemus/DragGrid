package com.nemustech.test.eatupfreespace;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.StatFs;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.NumberFormat;

public class MainActivity extends Activity {


	private String mPath;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		init();
	}

	private void init() {
		mPath = getFilesDir().getPath() + File.separator + "tmp.out";

		final TextView currFreeSpaceTxt = (TextView) findViewById(R.id.value_curr_free_space);

		currFreeSpaceTxt.setText(NumberFormat.getInstance().format(getAvailableSpace(this)));

		final TextView currTmpFileSilzeTxt = (TextView) findViewById(R.id.value_tmp_file_size);
		File tmpFile = new File(mPath);
		if(tmpFile != null && tmpFile.exists() && tmpFile.length() > 0) {
			currTmpFileSilzeTxt.setText(NumberFormat.getInstance().format(tmpFile.length()));
		} else {
			currTmpFileSilzeTxt.setText(String.valueOf(0));
		}

		final Button btn = (Button)findViewById(R.id.btn_eat_up);
		btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				EditText valueEditTxt = (EditText) findViewById(R.id.edit_value);
				String valueStr = valueEditTxt.getText().toString();
				if(valueStr == null || "".equals(valueStr)) {
					valueStr = valueEditTxt.getHint().toString();
				}

				final long sizeToLeave = Long.valueOf(valueStr);
				final long availSize = MainActivity.getAvailableSpace(MainActivity.this);
				final long tmpFileSize;
				final File tmpFile = new File(mPath);
				if(tmpFile.exists()) {
					tmpFileSize = tmpFile.length();
				} else {
					tmpFileSize = 0;
				}

				if((availSize - tmpFileSize) > sizeToLeave) {
					removeTmpFile();
					createEmptyFile(sizeToLeave);
				}

				init();
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	private void createEmptyFile(long fileSize) {
		final File file = new File(getFilesDir().getPath(), "tmp.out");
		final byte buf[] = new byte[1024];
		long sizeToWrite = fileSize;
		FileOutputStream out = null;
		try {
		    out = new FileOutputStream(file);
		    
		    while(sizeToWrite > 0) {
		    	if(sizeToWrite > 1024) {
		    		out.write(buf);
		    		sizeToWrite-=1024;
		    	} else {
		    		byte bufLeft[] = new byte[(int)sizeToWrite];
		    		out.write(bufLeft);
		    		sizeToWrite = 0;
		    	}
		    }
		    
		    out.flush();  // will create the file physically.
		    
		    Toast.makeText(this, "File creation fin", Toast.LENGTH_SHORT).show();;
		} catch (IOException e) {
		    Log.w("Create File", "Failed to write into " + file.getName());
		} finally {
		    if (out != null) {
		        try {
		            out.close();
		        } catch (IOException e) {
		        }
		    }
		}
	}
	
	public boolean removeTmpFile() {
		if(mPath != null) {
			File tmpFile = new File(mPath);
			if(tmpFile != null && tmpFile.exists()) {
				tmpFile.delete();
			}
		}
		return true;
	}
	
	static long getAvailableSpace(Context context) {
		final String path = context.getFilesDir().getPath();
		final StatFs stat = new StatFs(path);
		final long blockSize = stat.getBlockSize();
		final long availableBlocks = stat.getAvailableBlocks();
		android.util.Log.d("hsw_dbg", " space = " + (availableBlocks * blockSize));
		return availableBlocks * blockSize;
	}
}
