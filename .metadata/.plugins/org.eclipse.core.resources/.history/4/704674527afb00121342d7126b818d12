package com.nemustech.widget.tf;

import android.content.Context;
import android.graphics.SurfaceTexture;
import android.opengl.GLSurfaceView;
import android.opengl.GLSurfaceView.EGLConfigChooser;
import android.opengl.GLSurfaceView.EGLContextFactory;
import android.opengl.GLSurfaceView.Renderer;
import android.opengl.GLUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.TextureView;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;
import javax.microedition.khronos.opengles.GL10;

/**
 * A TextureView that supports GLSurfaceView's Renderer interface
 * 
 * @author rhoon
 *
 */
public class RendererTextureView extends TextureView implements TextureView.SurfaceTextureListener {

	public static final int RENDERMODE_WHEN_DIRTY = GLSurfaceView.RENDERMODE_WHEN_DIRTY;
	public static final int RENDERMODE_CONTINUOUSLY = GLSurfaceView.RENDERMODE_CONTINUOUSLY;
	
	private static final String TAG = "RendererTextureView";
	private static final boolean DEBUG = true;
	private Renderer mRenderer;
	private RenderThread mRenderThread;
	private EGLConfigChooser mEGLConfigChooser;
    private EGLContextFactory mEGLContextFactory;
    private int mEGLContextClientVersion;
    private int mRenderMode = RENDERMODE_WHEN_DIRTY;
    private ArrayList<Runnable> mEQ = null;		// this is temporarily meaningful until mRenderThread gets instantiated.

	public RendererTextureView(Context context) {
		this(context, null);
	}

	public RendererTextureView(Context context, AttributeSet attrs) {
		super(context, attrs);
		setSurfaceTextureListener(this);
		if(DEBUG) Log.d(TAG, "[RendererTextureView()] Set SurfaceTexture Listener is set");
	}

	/**
	 * Must be called after setRenderer()
	 * @param renderMode one of RENDERMODE_WHEN_DIRTY, RENDERMODE_CONTINUOUSLY
	 */
	public void requestRender() {
		if(mRenderThread != null) {
			mRenderThread.requestRender();
		}
	}

	/**
	 * The same as GLSurfaceView.setRenderMode(). Must be called after setRenderer()
	 * @param renderMode one of RENDERMODE_WHEN_DIRTY, RENDERMODE_CONTINUOUSLY
	 */
	public void setRenderMode(int renderMode) {
		mRenderMode = renderMode;
		if(mRenderThread != null) {
			mRenderThread.setRenderMode(renderMode);
		}
	}

	public int getRenderMode() {
		return mRenderMode;
	}

	public void setEGLContextClientVersion(int version) {
		mEGLContextClientVersion = version;
	}

	public void setRenderer(Renderer r) {
		if (mEGLConfigChooser == null) {
			mEGLConfigChooser = new SimpleEGLConfigChooser(true);
		}
		if (mEGLContextFactory == null) {
			mEGLContextFactory = new DefaultContextFactory();
		}

		mRenderer = r;
	}

	public void queueEvent(Runnable r) {
		if(r==null) return;
		if(mRenderThread == null) {
			if(mEQ == null) mEQ = new ArrayList<Runnable>();
			mEQ.add(r);
		} else {
			mRenderThread.queueEvent(r);
		}
	}

	public void onResume() {
		if(mRenderThread != null && mRenderThread.isAlive()) {
			mRenderThread.resumeLoop();
		}
	}

	public void onPause() {
		if(mRenderThread != null && mRenderThread.isAlive()) {
			mRenderThread.pauseLoop();
		}
	}

	/**
	 * Install a custom EGLConfigChooser.
	 * <p>If this method is
	 * called, it must be called before {@link #setRenderer(Renderer)}
	 * is called.
	 * <p>
	 * If no setEGLConfigChooser method is called, then by default the
	 * view will choose an EGLConfig that is compatible with the current
	 * android.view.Surface, with a depth buffer depth of
	 * at least 16 bits.
	 * @param configChooser
	 */
	public void setEGLConfigChooser(EGLConfigChooser configChooser) {
		mEGLConfigChooser = configChooser;
	}

	/**
	 * Install a config chooser which will choose a config
	 * as close to 16-bit RGB as possible, with or without an optional depth
	 * buffer as close to 16-bits as possible.
	 * <p>If this method is
	 * called, it must be called before {@link #setRenderer(Renderer)}
	 * is called.
	 * <p>
	 * If no setEGLConfigChooser method is called, then by default the
	 * view will choose an RGB_888 surface with a depth buffer depth of
	 * at least 16 bits.
	 *
	 * @param needDepth
	 */
	public void setEGLConfigChooser(boolean needDepth) {
		setEGLConfigChooser(new SimpleEGLConfigChooser(needDepth));
	}

	/**
	 * Install a config chooser which will choose a config
	 * with at least the specified depthSize and stencilSize,
	 * and exactly the specified redSize, greenSize, blueSize and alphaSize.
	 * <p>If this method is
	 * called, it must be called before {@link #setRenderer(Renderer)}
	 * is called.
	 * <p>
	 * If no setEGLConfigChooser method is called, then by default the
	 * view will choose an RGB_888 surface with a depth buffer depth of
	 * at least 16 bits.
	 *
	 */
	public void setEGLConfigChooser(int redSize, int greenSize, int blueSize,
			int alphaSize, int depthSize, int stencilSize) {
		setEGLConfigChooser(new ComponentSizeChooser(redSize, greenSize,
				blueSize, alphaSize, depthSize, stencilSize));
	}
	
    public void setEGLContextFactory(EGLContextFactory factory) {
        mEGLContextFactory = factory;
    }

	@Override
	public void onSurfaceTextureAvailable(SurfaceTexture surface, int width,
			int height) {
		if(DEBUG) Log.d(TAG, "onSurfaceTextureAvailable("+surface+", "+width+", "+height+")");

		if (mRenderer == null) {
			throw new IllegalStateException("Renderer must be set");
		}

		mRenderThread = new RenderThread(surface, width, height, mRenderMode, mEQ);
		mEQ = null;
		mRenderThread.start();
	}

	@Override
	public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
		if(DEBUG) Log.d(TAG, "onSurfaceTextureDestroyed("+surface+")");
		if (mRenderThread != null) {
			mRenderThread.finish();
		}

		return true;
	}

	@Override
	public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width,
			int height) {
		if(DEBUG) Log.d(TAG, "onSurfaceTextureSizeChanged("+surface+", "+width+", "+height+")");
		if(mRenderThread != null) {
			mRenderThread.surfaceSizeChanged(width, height);
		}
	}

	@Override
	public void onSurfaceTextureUpdated(SurfaceTexture surface) {
		if(DEBUG) Log.d(TAG, "onSurfaceTextureUpdated("+surface+")");
		if(mRenderThread != null) {
			mRenderThread.surfaceUpdated();
		}	
	}

	//////////////////////////////////////////////////////////////////////////////////////
	// Renderer Thread	
	private /*static*/ class RenderThread extends Thread { 
		private final SurfaceTexture mSurface;
		private EGL10 mEgl; 
		private EGLDisplay mEglDisplay; 
		private EGLConfig mEglConfig; 
		private EGLContext mEglContext; 
		private EGLSurface mEglSurface; 
		private GL10 mGL;
		private int mWidth, mHeight;
		private volatile boolean mFinished;
		private volatile boolean mSizeChanged;
		private volatile boolean mRequestRender = true;
		private volatile boolean mSurfaceUpdated = true;
		private volatile boolean mLoopPaused = false;
	    private volatile int mRenderMode;
		//private ArrayList<Runnable> mEventQueue = new ArrayList<Runnable>();
	    private LinkedBlockingQueue<Runnable> mEventQueue = new LinkedBlockingQueue<Runnable>();
		private final Object mLockObj = new Object();

		RenderThread(SurfaceTexture surface, int width, int height, int renderMode, Collection<Runnable> q) { 
			if(DEBUG) Log.d(TAG, "RenderThread constructed");
			mSurface = surface;
			mWidth = width;
			mHeight = height;
			mRenderMode = renderMode;
			android.util.Log.d("hsw_dbg", " event = " + q);
			if(q != null) mEventQueue.addAll(q);
		}
		
		void requestRender() {
			if(DEBUG) Log.d(TAG, "requestRender() called");
			if(mRenderMode == GLSurfaceView.RENDERMODE_WHEN_DIRTY) {
				synchronized(mLockObj) {
					mRequestRender = true;
					mLockObj.notifyAll();
				}
			}
			if(DEBUG) Log.d(TAG, "requestRender() end");
		}
		
		void queueEvent(Runnable r) {
			synchronized(mLockObj) {
				android.util.Log.d("hsw_dbg", " event = " + r);
				mEventQueue.add(r);
				mLockObj.notifyAll();
			}
		}
		
		void setRenderMode(int renderMode) {
			if(DEBUG) Log.d(TAG, "setRenderMode() called");
			synchronized(mLockObj) {
				mRenderMode = renderMode;
				mRequestRender = true;
				mLockObj.notifyAll();
			}
			if(DEBUG) Log.d(TAG, "setRenderMode() end");
		}
		
		void finish() {
			if(DEBUG) Log.d(TAG, "finish() called");
			synchronized(mLockObj) {
				mFinished = true;
				mLockObj.notifyAll();
			}
			if(DEBUG) Log.d(TAG, "finish() end");
		}
		
		void surfaceUpdated() {
			if(DEBUG) Log.d(TAG, "surfaceUpdated() called");
			synchronized(mLockObj) {
				mSurfaceUpdated = true;
				mLockObj.notifyAll();
			}
			if(DEBUG) Log.d(TAG, "surfaceUpdated() end");
		}
		
		void surfaceSizeChanged(int width, int height) {
			if(DEBUG) Log.d(TAG, "surfaceSizeChanged() called");
			synchronized(mLockObj) {
				mSizeChanged = true;
				mWidth = width;
				mHeight = height;
			}
			if(DEBUG) Log.d(TAG, "surfaceSizeChanged() end");
		}
		
		void pauseLoop() {
			if(DEBUG) Log.d(TAG, "pauseLoop() called");
			synchronized(mLockObj) {
				mLoopPaused = true;
				// Don't call mLockObj.notifyAll();
			}
			if(DEBUG) Log.d(TAG, "pauseLoop() end");
		}

		void resumeLoop() {
			if(DEBUG) Log.d(TAG, "resumeLoop() called");
			synchronized(mLockObj) {
				mLoopPaused = false;
				mLockObj.notifyAll();
			}
			if(DEBUG) Log.d(TAG, "resumeLoop() end");
		}

		@Override
		public void run() {
			initGL();

			if(DEBUG) Log.d(TAG, "calling Renderer.onSurfaceCreated()");
			mRenderer.onSurfaceCreated(mGL, mEglConfig);
			if(DEBUG) Log.d(TAG, "calling Renderer.onSurfaceChanged("+mWidth+", "+mHeight+")");
			mRenderer.onSurfaceChanged(mGL, mWidth, mHeight);
			
			renderingLoop();	// doesn't return until mFinished becomes true
			
			finishGL();
		}
		
		private void renderingLoop() {
			if(DEBUG) Log.d(TAG, "renderingLoop() started");
			while(!mFinished) {
				do {
					Runnable event = null;
					boolean callSizeChanged = false;
					boolean callDrawFrame = false;

					synchronized (mLockObj) {
						//event = (mEventQueue.isEmpty()) ? null : mEventQueue.poll();//(0);
						event = mEventQueue.poll();

						if (mSizeChanged) {
							mSizeChanged = false;
							callSizeChanged = true;
						}
						if(!mLoopPaused && mSurfaceUpdated && (mRenderMode == RENDERMODE_CONTINUOUSLY || mRequestRender)) {
							mSurfaceUpdated = false;
							mRequestRender = false;
							callDrawFrame = true;
						}
					}

					if (event != null) {
						
						event.run();
						break;		// go out of do-while(false)
					}
					if(callSizeChanged) {
						if(DEBUG) Log.d(TAG, "calling Renderer.onSurfaceChanged("+mWidth+", "+mHeight+")");
						mRenderer.onSurfaceChanged(mGL, mWidth, mHeight);
						break;		// go out of do-while(false)
					}
					if(callDrawFrame) {
						if(DEBUG) Log.d(TAG, "calling Renderer.onDrawFrame()");
						mRenderer.onDrawFrame(mGL);
						if(DEBUG) Log.d(TAG, "after Renderer.onDrawFrame()");
						checkGlError();
						if (!mEgl.eglSwapBuffers(mEglDisplay, mEglSurface)) {
							if (mFinished) {
								// in case that the surface is already released, while the renderer draws the frame.
								if(DEBUG) Log.d(TAG, "failed to swap buffers, because the surface was released");
								break;		// go out of do-while(false)
							}
							throw new RuntimeException("Cannot swap buffers");
						}
						if(DEBUG) Log.d(TAG, "after eglSwapBuffers()");
						checkEglError();
						break;		// go out of do-while(false)
					}

					if (!mRequestRender) {
						if(DEBUG) Log.d(TAG, "calling mLockObj.await(). current status: mLoopPaused="+mLoopPaused+" mSurfaceUpdated="+mSurfaceUpdated+" mRenderMode="+mRenderMode+" mRequestRender="+mRequestRender);
						synchronized (mLockObj) {
							try {
								mLockObj.wait();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							if(DEBUG) Log.d(TAG, "after mLockObj.await()");
						}
					}
				} while(false);
			}
		}


		private void initGL() {
			mEgl = (EGL10) EGLContext.getEGL(); 

			mEglDisplay = mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY); 
			if (mEglDisplay == EGL10.EGL_NO_DISPLAY) { 
				throw new RuntimeException( "eglGetDisplay failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()) ); 
			} 

			int[] version = new int[2]; 
			if (!mEgl.eglInitialize(mEglDisplay, version)) { 
				throw new RuntimeException( "eglInitialize failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()) ); 
			} 

			mEglConfig = mEGLConfigChooser.chooseConfig(mEgl, mEglDisplay); 
			if (mEglConfig == null) { 
				throw new RuntimeException("eglConfig not initialized"); 
			} 
			mEglContext = mEGLContextFactory.createContext(mEgl, mEglDisplay, mEglConfig); 
			mEglSurface = mEgl.eglCreateWindowSurface(mEglDisplay, mEglConfig, mSurface, null);

			if ( mEglSurface == null || mEglSurface == EGL10.EGL_NO_SURFACE ) { 
				int error = mEgl.eglGetError(); 
				if (error == EGL10.EGL_BAD_NATIVE_WINDOW) { 
					Log.e(TAG, "createWindowSurface returned EGL_BAD_NATIVE_WINDOW."); 
					return; 
				} 
				throw new RuntimeException("createWindowSurface failed " + GLUtils.getEGLErrorString(error)); 
			}

			if ( !mEgl.eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext) ) { 
				throw new RuntimeException( "eglMakeCurrent failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()) ); 
			} 

			mGL = (GL10)mEglContext.getGL(); 

			mGL.glShadeModel(GL10.GL_SMOOTH);
			mGL.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
			mGL.glEnable(GL10.GL_DEPTH_TEST);
			//mGL.glDepthFunc(GL10.GL_LEQUAL);
			mGL.glDepthFunc(GL10.GL_LESS);

			mGL.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
		}

		private void checkEglError() {
			int error = mEgl.eglGetError();
			if (error != EGL10.EGL_SUCCESS) {
				Log.w(TAG, "EGL error = 0x" + Integer.toHexString(error));
			}
		}

		private void checkGlError() {
			int error = mGL.glGetError();
			if (error != GL10.GL_NO_ERROR) {
				Log.w(TAG, "GL error = 0x" + Integer.toHexString(error));
			}
		}

		private void finishGL() {
			if(DEBUG) Log.d(TAG, "finishGL() called");

			mEgl.eglDestroyContext(mEglDisplay, mEglContext);
			mEgl.eglDestroySurface(mEglDisplay, mEglSurface);
		}

//		private void checkCurrent() {
//			if (!mEglContext.equals(mEgl.eglGetCurrentContext()) ||
//					!mEglSurface.equals(mEgl.eglGetCurrentSurface(EGL10.EGL_DRAW))) {
//				if (!mEgl.eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) {
//					throw new RuntimeException("eglMakeCurrent failed "
//							+ GLUtils.getEGLErrorString(mEgl.eglGetError()));
//				}
//			}
//		}
	}

	private abstract class BaseConfigChooser implements EGLConfigChooser {
		public BaseConfigChooser(int[] configSpec) {
			mConfigSpec = filterConfigSpec(configSpec);
		}

		public EGLConfig chooseConfig(EGL10 egl, EGLDisplay display) {
			int[] num_config = new int[1];
			if (!egl.eglChooseConfig(display, mConfigSpec, null, 0,
					num_config)) {
				throw new IllegalArgumentException("eglChooseConfig failed");
			}

			int numConfigs = num_config[0];

			if (numConfigs <= 0) {
				throw new IllegalArgumentException(
						"No configs match configSpec");
			}

			EGLConfig[] configs = new EGLConfig[numConfigs];
			if (!egl.eglChooseConfig(display, mConfigSpec, configs, numConfigs,
					num_config)) {
				throw new IllegalArgumentException("eglChooseConfig#2 failed");
			}
			EGLConfig config = chooseConfig(egl, display, configs);
			if (config == null) {
				throw new IllegalArgumentException("No config chosen");
			}
			return config;
		}

		abstract EGLConfig chooseConfig(EGL10 egl, EGLDisplay display,
				EGLConfig[] configs);

		protected int[] mConfigSpec;

		private int[] filterConfigSpec(int[] configSpec) {
			if (mEGLContextClientVersion != 2) {
				return configSpec;
			}
			/* We know none of the subclasses define EGL_RENDERABLE_TYPE.
			 * And we know the configSpec is well formed.
			 */
			int len = configSpec.length;
			int[] newConfigSpec = new int[len + 2];
			System.arraycopy(configSpec, 0, newConfigSpec, 0, len-1);
			newConfigSpec[len-1] = EGL10.EGL_RENDERABLE_TYPE;
			newConfigSpec[len] = 4; /* EGL_OPENGL_ES2_BIT */
			newConfigSpec[len+1] = EGL10.EGL_NONE;
			return newConfigSpec;
		}
	}

	/**
	 * Choose a configuration with exactly the specified r,g,b,a sizes,
	 * and at least the specified depth and stencil sizes.
	 */
	private class ComponentSizeChooser extends BaseConfigChooser {
		public ComponentSizeChooser(int redSize, int greenSize, int blueSize,
				int alphaSize, int depthSize, int stencilSize) {
			super(new int[] {
					EGL10.EGL_RED_SIZE, redSize,
					EGL10.EGL_GREEN_SIZE, greenSize,
					EGL10.EGL_BLUE_SIZE, blueSize,
					EGL10.EGL_ALPHA_SIZE, alphaSize,
					EGL10.EGL_DEPTH_SIZE, depthSize,
					EGL10.EGL_STENCIL_SIZE, stencilSize,
					EGL10.EGL_NONE});
			mValue = new int[1];
			mRedSize = redSize;
			mGreenSize = greenSize;
			mBlueSize = blueSize;
			mAlphaSize = alphaSize;
			mDepthSize = depthSize;
			mStencilSize = stencilSize;
		}

		@Override
		public EGLConfig chooseConfig(EGL10 egl, EGLDisplay display,
				EGLConfig[] configs) {
			for (EGLConfig config : configs) {
				int d = findConfigAttrib(egl, display, config,
						EGL10.EGL_DEPTH_SIZE, 0);
				int s = findConfigAttrib(egl, display, config,
						EGL10.EGL_STENCIL_SIZE, 0);
				if ((d >= mDepthSize) && (s >= mStencilSize)) {
					int r = findConfigAttrib(egl, display, config,
							EGL10.EGL_RED_SIZE, 0);
					int g = findConfigAttrib(egl, display, config,
							EGL10.EGL_GREEN_SIZE, 0);
					int b = findConfigAttrib(egl, display, config,
							EGL10.EGL_BLUE_SIZE, 0);
					int a = findConfigAttrib(egl, display, config,
							EGL10.EGL_ALPHA_SIZE, 0);
					if ((r == mRedSize) && (g == mGreenSize)
							&& (b == mBlueSize) && (a == mAlphaSize)) {
						return config;
					}
				}
			}
			return null;
		}

		private int findConfigAttrib(EGL10 egl, EGLDisplay display,
				EGLConfig config, int attribute, int defaultValue) {

			if (egl.eglGetConfigAttrib(display, config, attribute, mValue)) {
				return mValue[0];
			}
			return defaultValue;
		}

		private int[] mValue;
		// Subclasses can adjust these values:
		protected int mRedSize;
		protected int mGreenSize;
		protected int mBlueSize;
		protected int mAlphaSize;
		protected int mDepthSize;
		protected int mStencilSize;
	}


	/**
	 * This class will choose a RGB_888 surface with
	 * or without a depth buffer.
	 *
	 */
	private class SimpleEGLConfigChooser extends ComponentSizeChooser {
		public SimpleEGLConfigChooser(boolean withDepthBuffer) {
			super(8, 8, 8, 0, withDepthBuffer ? 16 : 0, 0);
		}
	}

	private class DefaultContextFactory implements EGLContextFactory {
		private int EGL_CONTEXT_CLIENT_VERSION = 0x3098;

		public EGLContext createContext(EGL10 egl, EGLDisplay display, EGLConfig config) {
			int[] attrib_list = {EGL_CONTEXT_CLIENT_VERSION, mEGLContextClientVersion,
					EGL10.EGL_NONE };

			return egl.eglCreateContext(display, config, EGL10.EGL_NO_CONTEXT,
					mEGLContextClientVersion != 0 ? attrib_list : null);
		}

		public void destroyContext(EGL10 egl, EGLDisplay display,
				EGLContext context) {
			if (!egl.eglDestroyContext(display, context)) {
				Log.e("DefaultContextFactory", "display:" + display + " context: " + context);
//				if (LOG_THREADS) {
//					Log.i("DefaultContextFactory", "tid=" + Thread.currentThread().getId());
//				}
//				EglHelper.throwEglException("eglDestroyContex", egl.eglGetError());
			}
		}
	}
}
